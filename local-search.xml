<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/undefined/"/>
    <url>/posts/undefined/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P9741 翻转与反转 做题笔记</title>
    <link href="/posts/ada942e/"/>
    <url>/posts/ada942e/</url>
    
    <content type="html"><![CDATA[<h1 id="翻转与反转"><a href="#翻转与反转" class="headerlink" title="翻转与反转"></a>翻转与反转</h1><h2 id="题目传送门"><a href="#题目传送门" class="headerlink" title="题目传送门"></a>题目传送门</h2><p><a href="https://www.luogu.com.cn/problem/P9741">洛谷P9741 翻转与反转</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>数据范围是$1\le n \le 2\times 10^6$ ，首先想到的是将如题的两个操作——翻转和反转模拟求解，但是会超时，于是有了第二种方法，规律通过每个数下标位置的变化和反转变化可得。</p><h2 id="算法一"><a href="#算法一" class="headerlink" title="算法一"></a>算法一</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>看了数据范围就是到，$O(n^2)$的算法肯定会超时，奈何本人太菜，先写一个吧。首先用序列 $[1,1,1]$（样例1） 举个例子</p><table><thead><tr><th>操作次数</th><th>序列$a$的变化</th></tr></thead><tbody><tr><td>1</td><td>$[1,1,1]→{\color{Red} [1,1,1]} →{\color{Purple} [0,1,1]} $</td></tr><tr><td>2</td><td>$[0,1,1]→{\color{Red} [1,0,1]} →{\color{Purple} [0,1,1]} $</td></tr><tr><td>3</td><td>$[0,1,1]→{\color{Red} [1,1,0]} →{\color{Purple} [0,0,1]} $</td></tr></tbody></table><p>这是题目中所给的样例1的解释，上面的表格中，红色表示的是翻转后的结果，而紫色表示的是反转后的结果。在$i&#x3D;1$的时候可以发现第$1$个数进行了翻转与反转，它的下标没有发生变化，在$i&#x3D;2$时，第$1$个和第$2$个数进行了翻转，且第$2$个数反转为$1$第$1$个数反转为$0$，$i&#x3D;3$时从第$3$个数翻转到第$1$个数，且第$3$个数原本为$1$，反转为$0$，第$2$个数字原本为$1$反转为$0$，第$1$个数原本为$0$反转为$1$，可以分析出规律：从第$i$个数到第$1$个数进行翻转，且翻转同时将原本的数进行取反。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long int</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-title">N</span><span class="hljs-params">((<span class="hljs-number">2</span> * (<span class="hljs-number">1e6</span>)) + <span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-type">bool</span> a[N], b[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ll n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i], b[i] = a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++)<br>        &#123;<br>            <span class="hljs-comment">//从从第i个数到第1个数进行翻转，且翻转同时将原本的数进行取反。</span><br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)<br>                a[j] = !(b[i - j + <span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">else</span><br>                b[j] = !(a[i - j + <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            cout &lt;&lt; b[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/record/129857292">超时30pts</a></p><h2 id="算法二"><a href="#算法二" class="headerlink" title="算法二"></a>算法二</h2><p>因为暴力枚举的算法是过不了的，所以我们需要找规律。首先找翻转的规律，其次找反转的规律。</p><h3 id="翻转"><a href="#翻转" class="headerlink" title="翻转"></a>翻转</h3><p>首先我们观察样例一，一个长度为$3$的序列，这个序列的下标也就是 $[1,2,3]$ 它在翻转时的变化如下：</p><p>${\large [1,2,3]\to {\color{Blue} [1,2,3]}\to {\color{Green} [2,1,3]}\to {\color{Orange}[3,1,2]}  } $</p><p>初步发现当$n$为奇数时，下标为奇数的跑到了前面，偶数的跑到了后面，自行举几个例子也是如此。</p><p>接着观察样例二，因为样例2有点长，我们用$n$也为偶数的序列研究。当序列长度为$n$时，序列下标为 $[1,2,3,4]$ 它在翻转时的变化如下：</p><p>${\large [1,2,3,4]\to {\color{Blue}[1,2,3,4]}\to{\color{Green}[2,1,3,4]}\to{\color{Orange}[3,1,2,4]}\to{\color{Red}[4,2,1,3]}} $</p><p>发现当$n$为偶数时，下标为偶数的跑的了前面，奇数的跑的了后面，自行举几个例子也是如此。</p><p>整理发现，当$n$为偶数时，如果$i$为偶数时会在前$n&#x2F;2$项，并且$i$越大越靠前。当$i$为奇数时会在后$n&#x2F;2$项，且$i$越大越靠后</p><p>当$n$为奇数时，如果$i$为偶数时会在后$n&#x2F;2$项，并且$i$越大越靠后。当$i$为奇数时会出现在前$n&#x2F;2+1$项，且$i$越大越靠前。</p><p>也就是说第$i$个数最后的落脚点与$n$和$i$的奇偶性，长度都有关系。</p><p>整理可得：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                b[(n / <span class="hljs-number">2</span>) - (i / <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>] = a[i];<br>            <span class="hljs-keyword">else</span><br>                b[(n / <span class="hljs-number">2</span>) + (i / <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>] = a[i];<br>        &#125;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>       &#123;<br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                b[(n / <span class="hljs-number">2</span>) + (i / <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>] = a[i];<br>            <span class="hljs-keyword">else</span><br>                b[(n / <span class="hljs-number">2</span>) - (i / <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>] = a[i];<br>       &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h3><p>反转我们可以发现：当$n$为偶数时，前$n&#x2F;2$项需要取反，后面的不变；当$n$为偶数时，前$n&#x2F;2+1$项需要取反，后面的不必。</p><p>可得代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <br>&#123;<br> <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>    &#123;<br><span class="hljs-keyword">if</span> (i &lt;= n / <span class="hljs-number">2</span>)<br>cout &lt;&lt; !b[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; b[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br><span class="hljs-keyword">if</span> (i &lt;= n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)<br>cout &lt;&lt; !b[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">else</span><br>        cout &lt;&lt; b[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ll long long int</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">int</span> <span class="hljs-title">N</span><span class="hljs-params">((<span class="hljs-number">2</span> * (<span class="hljs-number">1e6</span>)) + <span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-type">int</span> a[N], b[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-number">0</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        cin &gt;&gt; a[i];<br>    <span class="hljs-comment">//进行翻转操作</span><br>    <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                b[(n / <span class="hljs-number">2</span>) - (i / <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>] = a[i];<br>            <span class="hljs-keyword">else</span><br>                b[(n / <span class="hljs-number">2</span>) + (i / <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>] = a[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>                b[(n / <span class="hljs-number">2</span>) + (i / <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>] = a[i];<br>            <span class="hljs-keyword">else</span><br>                b[(n / <span class="hljs-number">2</span>) - (i / <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>] = a[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//进行反转操作</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &lt;= n / <span class="hljs-number">2</span>)<br>                cout &lt;&lt; !b[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>            <span class="hljs-keyword">else</span><br>                cout &lt;&lt; b[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (i &lt;= n / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>)<br>                cout &lt;&lt; !b[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>            <span class="hljs-keyword">else</span><br>                cout &lt;&lt; b[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//完结撒花</span><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/record/130050046">AC记录</a></p>]]></content>
    
    
    <categories>
      
      <category>做题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>规律</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>洛谷P1588 Catch That Cow 做题笔记</title>
    <link href="/posts/e235da90/"/>
    <url>/posts/e235da90/</url>
    
    <content type="html"><![CDATA[<h1 id="Catch-That-Cow"><a href="#Catch-That-Cow" class="headerlink" title="Catch That Cow"></a>Catch That Cow</h1><h2 id="题目传送门"><a href="#题目传送门" class="headerlink" title="题目传送门"></a>题目传送门</h2><p><a href="https://www.luogu.com.cn/problem/P1588">洛谷P1588 Catch That Cow</a></p><h2 id="题目大意（乱搞awa）"><a href="#题目大意（乱搞awa）" class="headerlink" title="题目大意（乱搞awa）"></a>题目大意（乱搞awa）</h2><p><del>在数轴上有一动点x和一定点y，点x每秒前进一个单位长度或后退一个单位长度或移动到当前位置坐标*2的点，问点x到点y最短要几秒</del></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>很容易看出这是一道广搜（BFS）题（其实我没看出来qwq，我太蒻了）。在这道题目中一个点可以通过三种方式(如题)移动，也就是一个点（$x$）只能扩展到三个点，即$x+1$,$x-1$，$2*x$这三个点。所以我们可以采用广搜的方式，用一个队列来记录没有走过的点，同时记录该点的步数，如果这个点等于奶牛的位置就可以输出步数了</p><h3 id="广搜是什么？"><a href="#广搜是什么？" class="headerlink" title="广搜是什么？"></a>广搜是什么？</h3><p><a href="https://oi-wiki.org/graph/bfs/">OI Wiki直达</a></p><p>我的理解：首先用一个队列（可以使STL也可以是手写的）记录初始值，只要队列不为空就循环，扩展该值的可以到达的几个值，再将这几个值入队，知道找到答案。</p><p><img src="https://jsd.cdn.zzko.cn/gh/xuesj1/picx-images-hosting@master/shapes.1y8ys4weoza8.webp" alt="广搜"></p><h3 id="广搜和深搜的用法区别"><a href="#广搜和深搜的用法区别" class="headerlink" title="广搜和深搜的用法区别"></a>广搜和深搜的用法区别</h3><blockquote><p>同样是寻找目标解，深度优先搜索寻找操作步骤字典序最小的解，而广度优先搜索可以找到步骤最少的解。需要根据题目的性质来决定使用什么搜索算法。</p><p>​By 深基</p></blockquote><h2 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h2><h3 id="广搜"><a href="#广搜" class="headerlink" title="广搜"></a>广搜</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// P1588</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">100005</span>; <span class="hljs-comment">// 定义边界值（10^5）</span><br><span class="hljs-type">int</span> ans[MAX];           <span class="hljs-comment">// 定义答案（步数）数组</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>  <span class="hljs-comment">// 广搜函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(ans, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> ans); <span class="hljs-comment">// 因为有多组数据，所以每次数组都要清零</span><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;               <span class="hljs-comment">// 广搜用队列</span><br>    q.<span class="hljs-built_in">push</span>(x);                  <span class="hljs-comment">// 将初始值（农夫的坐标）入队</span><br>    ans[x] = <span class="hljs-number">0</span>;                 <span class="hljs-comment">// 初始位置到初始位置的坐标是0，如果x==y输出0</span><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())          <span class="hljs-comment">// 如果队列不为空就循环</span><br>    &#123;<br>        <span class="hljs-type">int</span> hd = q.<span class="hljs-built_in">front</span>();          <span class="hljs-comment">// 记录队首元素</span><br>        q.<span class="hljs-built_in">pop</span>();                     <span class="hljs-comment">// 队首元素出队</span><br>        <span class="hljs-keyword">if</span> (hd == y)                 <span class="hljs-comment">// 如果当前元素等于奶牛的位置，说明农夫抓到了牛</span><br>            cout &lt;&lt; ans[hd] &lt;&lt; endl; <span class="hljs-comment">// 输出当前元素所用步数</span><br>        <span class="hljs-comment">// 农夫有三种走法：1.前进一步    2.后退一步    3.走（瞬移）到当前坐标*2的点</span><br>        <span class="hljs-keyword">if</span> (hd + <span class="hljs-number">1</span> &lt;= MAX &amp;&amp; ans[hd + <span class="hljs-number">1</span>] == <span class="hljs-number">0</span>) <span class="hljs-comment">// 1.前进一步，如果前进后点的坐标没有越界并且前进后的点没有被走过</span><br>        &#123;<br>            ans[hd + <span class="hljs-number">1</span>] = ans[hd] + <span class="hljs-number">1</span>; <span class="hljs-comment">// 前进后点的步数为当前点+1</span><br>            q.<span class="hljs-built_in">push</span>(hd + <span class="hljs-number">1</span>);            <span class="hljs-comment">// 走过了，将该元素入队</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (hd - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; ans[hd - <span class="hljs-number">1</span>] == <span class="hljs-number">0</span>) <span class="hljs-comment">// 2.后退一步，如果后退的点不小于0且没有被走过 PS：要&gt;=0不能是&gt;=x 因为当x=5 y=8时 走法为（5-1）*2</span><br>        &#123;<br>            ans[hd - <span class="hljs-number">1</span>] = ans[hd] + <span class="hljs-number">1</span>; <span class="hljs-comment">////后退的点的步数为当前点+1</span><br>            q.<span class="hljs-built_in">push</span>(hd - <span class="hljs-number">1</span>);            <span class="hljs-comment">// 走过了，将该元素入队</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (hd * <span class="hljs-number">2</span> &lt;= MAX &amp;&amp; ans[hd * <span class="hljs-number">2</span>] == <span class="hljs-number">0</span>) <span class="hljs-comment">// 3.走到当前坐标*2的点，如果*2的点没有越界且没走过 PS：要&lt;=MAX不能是&lt;=y 因为当x=5 y=9时 走法为（2*5）-1</span><br>        &#123;<br>            ans[hd * <span class="hljs-number">2</span>] = ans[hd] + <span class="hljs-number">1</span>; <span class="hljs-comment">//*2后的点的步数为当前点+1</span><br>            q.<span class="hljs-built_in">push</span>(hd * <span class="hljs-number">2</span>);            <span class="hljs-comment">// 走过了，将该元素入队</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> t; <span class="hljs-comment">// 总共有t组数据</span><br>    cin &gt;&gt; t;<br>    <span class="hljs-keyword">while</span> (t--) <span class="hljs-comment">// 循环输入t次</span><br>    &#123;<br>        <span class="hljs-type">int</span> x, y;<br>        cin &gt;&gt; x &gt;&gt; y; <span class="hljs-comment">// 输入农夫和牛的坐标</span><br>        <span class="hljs-built_in">bfs</span>(x, y);     <span class="hljs-comment">// 广搜</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a href="https://www.luogu.com.cn/record/122889221">AC记录</a></p><h3 id="深搜"><a href="#深搜" class="headerlink" title="深搜"></a>深搜</h3><p><del>我不会</del></p><p><a href="https://www.luogu.com.cn/blog/wzsyyh/solution-p1588">看这位大佬的吧awa</a></p><p><strong>加油OIer</strong></p>]]></content>
    
    
    <categories>
      
      <category>做题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>广搜（BFS）</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
